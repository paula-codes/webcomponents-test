{"version":3,"file":"index.js","sources":["../index.js"],"sourcesContent":["import filesize from \"rollup-plugin-filesize\";\nimport asTable from \"as-table\";\nimport { green, yellowBright, red, bold } from \"chalk\";\n\nexport default function (options) {\n    function colorize(value, color) {\n        switch (color) {\n            case \"green\": return green(value);\n            case \"yellow\": return yellowBright(value);\n            case \"red\": return red(value);\n        }\n    }\n\n    function calculateByteSize(value) {\n        let [num, unit] = value.split(\" \");\n        switch (unit) {\n            case \"B\": return parseFloat(num);\n            case \"KB\": return parseFloat(num) * 1e3;\n            case \"MB\": return parseFloat(num) * 1e6;\n            case \"GB\": return parseFloat(num) * 1e9;\n            default: return num;\n        }\n    }\n\n    function toReadableNumber(num) {\n        return num.toLocaleString(\"en\", { maximumFractionDigits: 2 });\n    }\n\n    function getReadableSize({ value, isTotal, warnLow, warnHigh, totalLow, totalHigh, colored = true } = {}) {\n        let result;\n        value = parseFloat(value);\n        // File size unit\n        switch (true) {\n            case value < 1e3: result = toReadableNumber(value) + \" B\"; break;\n            case value >= 1e3 && value < 1e6: result = toReadableNumber(value / 1e3) + \" KB\"; break;\n            case value >= 1e6 && value < 1e9: result = toReadableNumber(value / 1e6) + \" MB\"; break;\n            default: result = String(value.toFixed());\n        }\n\n        if (colored) {\n            const low = isTotal ? totalLow : warnLow;\n            const high = isTotal ? totalHigh : warnHigh;\n            const color = value < low ? \"green\" : value < high ? \"yellow\" : \"red\";\n            return colorize(result, color);\n        } else {\n            return result;\n        }\n    }\n\n    let sizes = [];\n    let columnsMaxValue = {\n        Name: '',\n        Size: '',\n        Minified: '',\n        Gzipped: '',\n        Brotli: '',\n    }\n    let totalSize = 0;\n    let totalMinified = 0;\n    let totalGzipped = 0;\n    let totalBrotli = 0;\n\n    const defaultOptions = {\n        warnLow: options && options.warnLow || 5e3,\n        warnHigh: options && options.warnHigh || 1e4,\n        totalLow: options && options.totalLow || 2e5,\n        totalHigh: options && options.totalHigh || 3e5\n    };\n\n    return {\n        name: \"rollup-plugin-summary\",\n        generateBundle: async function (...args) {\n            // Reset ahead of calculations\n            totalSize = totalMinified = totalGzipped = totalBrotli = 0;\n            sizes = [];\n\n            await filesize({\n                showBrotliSize: true,\n                reporter: (options, bundle, { fileName, bundleSize, minSize, gzipSize, brotliSize }) => {\n                    // Calculating totals\n                    totalSize += calculateByteSize(bundleSize || \"0 B\");\n                    totalMinified += calculateByteSize(minSize || \"0 B\");\n                    totalGzipped += calculateByteSize(gzipSize || \"0 B\");\n                    totalBrotli += calculateByteSize(brotliSize || \"0 B\");\n\n                    // Archiving entries\n                    sizes.push({\n                        Name: fileName,\n                        Size: getReadableSize({ value: calculateByteSize(bundleSize || \"0 B\"), ...defaultOptions }),\n                        Minified: getReadableSize({ value: calculateByteSize(minSize || \"0 B\"), ...defaultOptions }),\n                        Gzipped: getReadableSize({ value: calculateByteSize(gzipSize || \"0 B\"), ...defaultOptions }),\n                        Brotli: getReadableSize({ value: calculateByteSize(brotliSize || \"0 B\"), ...defaultOptions }),\n                    });\n\n                    const max = (a, b) => a.length > b.length ? a : b;\n\n                    columnsMaxValue.Name = max(columnsMaxValue.Name, fileName);\n                }\n            }).generateBundle(...args);\n\n            columnsMaxValue = {\n                Name: columnsMaxValue.Name,\n                Size: getReadableSize({ value: totalSize, isTotal: true, ...defaultOptions, colored: false }),\n                Minified: getReadableSize({ value: totalMinified, isTotal: true, ...defaultOptions, colored: false }),\n                Gzipped: getReadableSize({ value: totalGzipped, isTotal: true, ...defaultOptions, colored: false }),\n                Brotli: getReadableSize({ value: totalBrotli, isTotal: true, ...defaultOptions, colored: false }),\n            }\n\n            const makeDashes = (times) => \"-\".repeat(times);\n\n            sizes = sizes.sort((a, b) => a.Name.localeCompare(b.Name));\n\n            // Adding totals (footer)\n            sizes.push(\n                {\n                    Name: makeDashes(columnsMaxValue.Name.length),\n                    Size: makeDashes(columnsMaxValue.Size.length),\n                    Minified: makeDashes(columnsMaxValue.Minified.length),\n                    Gzipped: makeDashes(columnsMaxValue.Gzipped.length), // 2 is to get the dashes to reach the right end of the table\n                    Brotli: makeDashes(columnsMaxValue.Brotli.length + 2), // 2 is to get the dashes to reach the right end of the table\n                },\n                {\n                    Name: \"Total\",\n                    Size: getReadableSize({ value: totalSize, isTotal: true, ...defaultOptions }),\n                    Minified: getReadableSize({ value: totalMinified, isTotal: true, ...defaultOptions }),\n                    Gzipped: getReadableSize({ value: totalGzipped, isTotal: true, ...defaultOptions }),\n                    Brotli: getReadableSize({ value: totalBrotli, isTotal: true, ...defaultOptions }),\n                }\n            );\n            // Printing\n            console.info(`\n                \\n${bold(\"ðŸ“„ Generated files:\")}\n                \\n${asTable(sizes.map(item => ({ Name: item.Name, Size: item.Size, Minified: item.Minified, Gzipped: item.Gzipped, Brotli: item.Brotli })))}\n            `);\n        }\n    }\n}\n"],"names":["options","calculateByteSize","value","num","unit","split","parseFloat","toReadableNumber","toLocaleString","maximumFractionDigits","getReadableSize","isTotal","warnLow","warnHigh","totalLow","totalHigh","colored","result","String","toFixed","high","color","green","yellowBright","red","colorize","sizes","columnsMaxValue","Name","Size","Minified","Gzipped","Brotli","totalSize","totalMinified","totalGzipped","totalBrotli","defaultOptions","name","generateBundle","async","args","filesize","showBrotliSize","reporter","bundle","fileName","bundleSize","minSize","gzipSize","brotliSize","push","a","b","length","makeDashes","times","repeat","sort","localeCompare","console","info","bold","asTable","map","item"],"mappings":"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"}